["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:use-macros",["^ "],"~:excludes",["~#set",[]],"~:name","~$re-frame.interceptor","~:imports",null,"~:requires",["^ ","~$re-frame.loggers","^9","~$re-frame.interop","^:"],"~:uses",["^ ","~$console","^9","~$ratom?","^:","~$empty-queue","^:","~$debug-enabled?","^:"],"~:defs",["^ ","~$invoke-interceptors",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/Users/paulcristian/Kitchen/LvLUp/target/cljsbuild/public/js/out/re_frame/interceptor.cljc","~:line",70,"~:column",8,"~:end-line",70,"~:end-column",27,"~:private",true,"~:arglists",["~#list",["~$quote",["^K",[["~$context","~$direction"]]]]],"~:doc","Loop over all interceptors, calling `direction` function on each,\n  threading the value of `context` through every call.\n\n  `direction` is one of `:before` or `:after`.\n\n  Each iteration, the next interceptor to process is obtained from\n  context's `:queue`. After they are processed, interceptors are popped\n  from `:queue` and added to `:stack`.\n\n  After sufficient iteration, `:queue` will be empty, and `:stack` will\n  contain all interceptors processed.\n\n  Returns updated `context`. Ie. the `context` which has been threaded\n  through all interceptor functions.\n\n  Generally speaking, an interceptor's `:before` function will (if present)\n  add to a `context's` `:coeffects`, while it's `:after` function\n  will modify the `context`'s `:effects`.  Very approximately.\n\n  But because all interceptor functions are given `context`, and can\n  return a modified version of it, the way is clear for an interceptor\n  to introspect the stack or queue, or even modify the queue\n  (add new interceptors via `enqueue`?). This is a very fluid arrangement."],"^I",true,"^5","~$re-frame.interceptor/invoke-interceptors","~:variadic",false,"^D","target/cljsbuild/public/js/out/re_frame/interceptor.cljc","^H",27,"~:method-params",["^K",[["^M","^N"]]],"~:protocol-impl",null,"~:arglists-meta",["^K",[null,null]],"^F",1,"^E",70,"^G",70,"~:max-fixed-arity",2,"~:fn-var",true,"^J",["^K",["^L",["^K",[["^M","^N"]]]]],"^O","Loop over all interceptors, calling `direction` function on each,\n  threading the value of `context` through every call.\n\n  `direction` is one of `:before` or `:after`.\n\n  Each iteration, the next interceptor to process is obtained from\n  context's `:queue`. After they are processed, interceptors are popped\n  from `:queue` and added to `:stack`.\n\n  After sufficient iteration, `:queue` will be empty, and `:stack` will\n  contain all interceptors processed.\n\n  Returns updated `context`. Ie. the `context` which has been threaded\n  through all interceptor functions.\n\n  Generally speaking, an interceptor's `:before` function will (if present)\n  add to a `context's` `:coeffects`, while it's `:after` function\n  will modify the `context`'s `:effects`.  Very approximately.\n\n  But because all interceptor functions are given `context`, and can\n  return a modified version of it, the way is clear for an interceptor\n  to introspect the stack or queue, or even modify the queue\n  (add new interceptors via `enqueue`?). This is a very fluid arrangement."],"~$assoc-coeffect",["^ ","^B",null,"^C",["^ ","^D","/Users/paulcristian/Kitchen/LvLUp/target/cljsbuild/public/js/out/re_frame/interceptor.cljc","^E",52,"^F",7,"^G",52,"^H",21,"^J",["^K",["^L",["^K",[["^M","~$key","~$value"]]]]]],"^5","~$re-frame.interceptor/assoc-coeffect","^Q",false,"^D","target/cljsbuild/public/js/out/re_frame/interceptor.cljc","^H",21,"^R",["^K",[["^M","^X","^Y"]]],"^S",null,"^T",["^K",[null,null]],"^F",1,"^E",52,"^G",52,"^U",3,"^V",true,"^J",["^K",["^L",["^K",[["^M","^X","^Y"]]]]]],"~$update-coeffect",["^ ","^B",null,"^C",["^ ","^D","/Users/paulcristian/Kitchen/LvLUp/target/cljsbuild/public/js/out/re_frame/interceptor.cljc","^E",56,"^F",7,"^G",56,"^H",22,"^J",["^K",["^L",["^K",[["^M","^X","~$f","~$&","~$args"]]]]],"~:top-fn",["^ ","^Q",true,"^U",3,"^R",[["^K",["^M","^X","~$f","^10"]]],"^J",["^K",[["^M","^X","~$f","~$&","^10"]]],"^T",["^K",[null]]]],"^5","~$re-frame.interceptor/update-coeffect","^Q",true,"^D","target/cljsbuild/public/js/out/re_frame/interceptor.cljc","^H",22,"^11",["^ ","^Q",true,"^U",3,"^R",[["^K",["^M","^X","~$f","^10"]]],"^J",["^K",[["^M","^X","~$f","~$&","^10"]]],"^T",["^K",[null]]],"^R",[["^K",["^M","^X","~$f","^10"]]],"^S",null,"^T",["^K",[null]],"^F",1,"^E",56,"^G",56,"^U",3,"^V",true,"^J",["^K",[["^M","^X","~$f","~$&","^10"]]]],"~$invoke-interceptor-fn",["^ ","^B",null,"^C",["^ ","^D","/Users/paulcristian/Kitchen/LvLUp/target/cljsbuild/public/js/out/re_frame/interceptor.cljc","^E",63,"^F",8,"^G",63,"^H",29,"^I",true,"^J",["^K",["^L",["^K",[["^M","~$interceptor","^N"]]]]]],"^I",true,"^5","~$re-frame.interceptor/invoke-interceptor-fn","^Q",false,"^D","target/cljsbuild/public/js/out/re_frame/interceptor.cljc","^H",29,"^R",["^K",[["^M","^14","^N"]]],"^S",null,"^T",["^K",[null,null]],"^F",1,"^E",63,"^G",63,"^U",3,"^V",true,"^J",["^K",["^L",["^K",[["^M","^14","^N"]]]]]],"~$get-effect",["^ ","^B",null,"^C",["^ ","^D","/Users/paulcristian/Kitchen/LvLUp/target/cljsbuild/public/js/out/re_frame/interceptor.cljc","^E",29,"^F",7,"^G",29,"^H",17,"^J",["^K",["^L",["^K",[["^M"],["^M","^X"],["^M","^X","~$not-found"]]]]],"^11",["^ ","^Q",false,"^U",3,"^R",["^K",[["^M"],["^M","^X"],["^M","^X","^17"]]],"^J",["^K",[["^M"],["^M","^X"],["^M","^X","^17"]]],"^T",["^K",[null,null,null]]]],"^5","~$re-frame.interceptor/get-effect","^Q",false,"^D","target/cljsbuild/public/js/out/re_frame/interceptor.cljc","^H",17,"^11",["^ ","^Q",false,"^U",3,"^R",["^K",[["^M"],["^M","^X"],["^M","^X","^17"]]],"^J",["^K",[["^M"],["^M","^X"],["^M","^X","^17"]]],"^T",["^K",[null,null,null]]],"^R",["^K",[["^M"],["^M","^X"],["^M","^X","^17"]]],"^S",null,"^T",["^K",[null,null,null]],"^F",1,"^E",29,"^G",29,"^U",3,"^V",true,"^J",["^K",[["^M"],["^M","^X"],["^M","^X","^17"]]]],"~$->interceptor",["^ ","^B",null,"^C",["^ ","^D","/Users/paulcristian/Kitchen/LvLUp/target/cljsbuild/public/js/out/re_frame/interceptor.cljc","^E",15,"^F",7,"^G",15,"^H",20,"^J",["^K",["^L",["^K",[["~$&",["^ ","~:as","~$m","~:keys",["~$id","~$before","~$after"]]]]]]],"^O","Create an interceptor from named arguments","^11",["^ ","^Q",true,"^U",0,"^R",[["^K",[["^ ","^1:","~$m","^1;",["^1<","^1=","^1>"]]]]],"^J",["^K",[["~$&",["^ ","^1:","~$m","^1;",["^1<","^1=","^1>"]]]]],"^T",["^K",[null]]]],"^5","~$re-frame.interceptor/->interceptor","^Q",true,"^D","target/cljsbuild/public/js/out/re_frame/interceptor.cljc","^H",20,"^11",["^ ","^Q",true,"^U",0,"^R",[["^K",[["^ ","^1:","~$m","^1;",["^1<","^1=","^1>"]]]]],"^J",["^K",[["~$&",["^ ","^1:","~$m","^1;",["^1<","^1=","^1>"]]]]],"^T",["^K",[null]]],"^R",[["^K",[["^ ","^1:","~$m","^1;",["^1<","^1=","^1>"]]]]],"^S",null,"^T",["^K",[null]],"^F",1,"^E",15,"^G",15,"^U",0,"^V",true,"^J",["^K",[["~$&",["^ ","^1:","~$m","^1;",["^1<","^1=","^1>"]]]]],"^O","Create an interceptor from named arguments"],"~$get-coeffect",["^ ","^B",null,"^C",["^ ","^D","/Users/paulcristian/Kitchen/LvLUp/target/cljsbuild/public/js/out/re_frame/interceptor.cljc","^E",44,"^F",7,"^G",44,"^H",19,"^J",["^K",["^L",["^K",[["^M"],["^M","^X"],["^M","^X","^17"]]]]],"^11",["^ ","^Q",false,"^U",3,"^R",["^K",[["^M"],["^M","^X"],["^M","^X","^17"]]],"^J",["^K",[["^M"],["^M","^X"],["^M","^X","^17"]]],"^T",["^K",[null,null,null]]]],"^5","~$re-frame.interceptor/get-coeffect","^Q",false,"^D","target/cljsbuild/public/js/out/re_frame/interceptor.cljc","^H",19,"^11",["^ ","^Q",false,"^U",3,"^R",["^K",[["^M"],["^M","^X"],["^M","^X","^17"]]],"^J",["^K",[["^M"],["^M","^X"],["^M","^X","^17"]]],"^T",["^K",[null,null,null]]],"^R",["^K",[["^M"],["^M","^X"],["^M","^X","^17"]]],"^S",null,"^T",["^K",[null,null,null]],"^F",1,"^E",44,"^G",44,"^U",3,"^V",true,"^J",["^K",[["^M"],["^M","^X"],["^M","^X","^17"]]]],"~$execute",["^ ","^B",null,"^C",["^ ","^D","/Users/paulcristian/Kitchen/LvLUp/target/cljsbuild/public/js/out/re_frame/interceptor.cljc","^E",144,"^F",7,"^G",144,"^H",14,"^J",["^K",["^L",["^K",[["~$event-v","~$interceptors"]]]]],"^O","Executes the given chain (coll) of interceptors.\n\n   Each interceptor has this form:\n       {:before  (fn [context] ...)     ;; returns possibly modified context\n        :after   (fn [context] ...)}    ;; `identity` would be a noop\n\n   Walks the queue of iterceptors from beginning to end, calling the\n   `:before` fn on each, then reverse direction and walk backwards,\n   calling the `:after` fn on each.\n\n   The last interceptor in the chain presumably wraps an event\n   handler fn. So the overall goal of the process is to \"handle\n   the given event\".\n\n   Thread a `context` through all calls. `context` has this form:\n\n     {:coeffects {:event [:a-query-id :some-param]\n                  :db    <original contents of app-db>}\n      :effects   {:db    <new value for app-db>\n                  :dispatch  [:an-event-id :param1]}\n      :queue     <a collection of further interceptors>\n      :stack     <a collection of interceptors already walked>}\n\n   `context` has `:coeffects` and `:effects` which, if this was a web\n   server, would be somewhat anologous to `request` and `response`\n   respectively.\n\n   `coeffects` will contain data like `event` and the initial\n   state of `db` -  the inputs required by the event handler\n   (sitting presumably on the end of the chain), while handler-returned\n   side effects are put into `:effects` including, but not limited to,\n   new values for `db`.\n\n   The first few interceptors in a chain will likely have `:before`\n   functions which \"prime\" the `context` by adding the event, and\n   the current state of app-db into `:coeffects`. But interceptors can\n   add whatever they want to `:coeffects` - perhaps the event handler needs\n   some information from localstore, or a random number, or access to\n   a DataScript connection.\n\n   Equally, some interceptors in the chain will have `:after` fn\n   which can process the side effects accumulated into `:effects`\n   including but, not limited to, updates to app-db.\n\n   Through both stages (before and after), `context` contains a `:queue`\n   of interceptors yet to be processed, and a `:stack` of interceptors\n   already done.  In advanced cases, these values can be modified by the\n   functions through which the context is threaded."],"^5","~$re-frame.interceptor/execute","^Q",false,"^D","target/cljsbuild/public/js/out/re_frame/interceptor.cljc","^H",14,"^R",["^K",[["^1C","^1D"]]],"^S",null,"^T",["^K",[null,null]],"^F",1,"^E",144,"^G",144,"^U",2,"^V",true,"^J",["^K",["^L",["^K",[["^1C","^1D"]]]]],"^O","Executes the given chain (coll) of interceptors.\n\n   Each interceptor has this form:\n       {:before  (fn [context] ...)     ;; returns possibly modified context\n        :after   (fn [context] ...)}    ;; `identity` would be a noop\n\n   Walks the queue of iterceptors from beginning to end, calling the\n   `:before` fn on each, then reverse direction and walk backwards,\n   calling the `:after` fn on each.\n\n   The last interceptor in the chain presumably wraps an event\n   handler fn. So the overall goal of the process is to \"handle\n   the given event\".\n\n   Thread a `context` through all calls. `context` has this form:\n\n     {:coeffects {:event [:a-query-id :some-param]\n                  :db    <original contents of app-db>}\n      :effects   {:db    <new value for app-db>\n                  :dispatch  [:an-event-id :param1]}\n      :queue     <a collection of further interceptors>\n      :stack     <a collection of interceptors already walked>}\n\n   `context` has `:coeffects` and `:effects` which, if this was a web\n   server, would be somewhat anologous to `request` and `response`\n   respectively.\n\n   `coeffects` will contain data like `event` and the initial\n   state of `db` -  the inputs required by the event handler\n   (sitting presumably on the end of the chain), while handler-returned\n   side effects are put into `:effects` including, but not limited to,\n   new values for `db`.\n\n   The first few interceptors in a chain will likely have `:before`\n   functions which \"prime\" the `context` by adding the event, and\n   the current state of app-db into `:coeffects`. But interceptors can\n   add whatever they want to `:coeffects` - perhaps the event handler needs\n   some information from localstore, or a random number, or access to\n   a DataScript connection.\n\n   Equally, some interceptors in the chain will have `:after` fn\n   which can process the side effects accumulated into `:effects`\n   including but, not limited to, updates to app-db.\n\n   Through both stages (before and after), `context` contains a `:queue`\n   of interceptors yet to be processed, and a `:stack` of interceptors\n   already done.  In advanced cases, these values can be modified by the\n   functions through which the context is threaded."],"~$assoc-effect",["^ ","^B",null,"^C",["^ ","^D","/Users/paulcristian/Kitchen/LvLUp/target/cljsbuild/public/js/out/re_frame/interceptor.cljc","^E",38,"^F",7,"^G",38,"^H",19,"^J",["^K",["^L",["^K",[["^M","^X","^Y"]]]]]],"^5","~$re-frame.interceptor/assoc-effect","^Q",false,"^D","target/cljsbuild/public/js/out/re_frame/interceptor.cljc","^H",19,"^R",["^K",[["^M","^X","^Y"]]],"^S",null,"^T",["^K",[null,null]],"^F",1,"^E",38,"^G",38,"^U",3,"^V",true,"^J",["^K",["^L",["^K",[["^M","^X","^Y"]]]]]],"~$enqueue",["^ ","^B",null,"^C",["^ ","^D","/Users/paulcristian/Kitchen/LvLUp/target/cljsbuild/public/js/out/re_frame/interceptor.cljc","^E",107,"^F",7,"^G",107,"^H",14,"^J",["^K",["^L",["^K",[["^M","^1D"]]]]],"^O","Add a collection of `interceptors` to the end of `context's` execution `:queue`.\n  Returns the updated `context`.\n\n  In an advanced case, this function could allow an interceptor to add new\n  interceptors to the `:queue` of a context."],"^5","~$re-frame.interceptor/enqueue","^Q",false,"^D","target/cljsbuild/public/js/out/re_frame/interceptor.cljc","^H",14,"^R",["^K",[["^M","^1D"]]],"^S",null,"^T",["^K",[null,null]],"^F",1,"^E",107,"^G",107,"^U",2,"^V",true,"^J",["^K",["^L",["^K",[["^M","^1D"]]]]],"^O","Add a collection of `interceptors` to the end of `context's` execution `:queue`.\n  Returns the updated `context`.\n\n  In an advanced case, this function could allow an interceptor to add new\n  interceptors to the `:queue` of a context."],"~$mandatory-interceptor-keys",["^ ","^5","~$re-frame.interceptor/mandatory-interceptor-keys","^D","target/cljsbuild/public/js/out/re_frame/interceptor.cljc","^E",7,"^F",1,"^G",7,"^H",32,"^C",["^ ","^D","/Users/paulcristian/Kitchen/LvLUp/target/cljsbuild/public/js/out/re_frame/interceptor.cljc","^E",7,"^F",6,"^G",7,"^H",32]],"~$interceptor?",["^ ","^B",null,"^C",["^ ","^D","/Users/paulcristian/Kitchen/LvLUp/target/cljsbuild/public/js/out/re_frame/interceptor.cljc","^E",9,"^F",7,"^G",9,"^H",19,"^J",["^K",["^L",["^K",[["~$m"]]]]]],"^5","~$re-frame.interceptor/interceptor?","^Q",false,"^D","target/cljsbuild/public/js/out/re_frame/interceptor.cljc","^H",19,"^R",["^K",[["~$m"]]],"^S",null,"^T",["^K",[null,null]],"^F",1,"^E",9,"^G",9,"^U",1,"^V",true,"^J",["^K",["^L",["^K",[["~$m"]]]]]],"~$change-direction",["^ ","^B",null,"^C",["^ ","^D","/Users/paulcristian/Kitchen/LvLUp/target/cljsbuild/public/js/out/re_frame/interceptor.cljc","^E",130,"^F",8,"^G",130,"^H",24,"^I",true,"^J",["^K",["^L",["^K",[["^M"]]]]],"^O","Called on completion of `:before` processing, this function prepares/modifies\n   `context` for the backwards sweep of processing in which an interceptor\n   chain's `:after` fns are called.\n\n  At this point in processing, the `:queue` is empty and `:stack` holds all\n  the previously run interceptors. So this function enables the backwards walk\n  by priming `:queue` with what's currently in `:stack`"],"^I",true,"^5","~$re-frame.interceptor/change-direction","^Q",false,"^D","target/cljsbuild/public/js/out/re_frame/interceptor.cljc","^H",24,"^R",["^K",[["^M"]]],"^S",null,"^T",["^K",[null,null]],"^F",1,"^E",130,"^G",130,"^U",1,"^V",true,"^J",["^K",["^L",["^K",[["^M"]]]]],"^O","Called on completion of `:before` processing, this function prepares/modifies\n   `context` for the backwards sweep of processing in which an interceptor\n   chain's `:after` fns are called.\n\n  At this point in processing, the `:queue` is empty and `:stack` holds all\n  the previously run interceptors. So this function enables the backwards walk\n  by priming `:queue` with what's currently in `:stack`"],"^M",["^ ","^B",null,"^C",["^ ","^D","/Users/paulcristian/Kitchen/LvLUp/target/cljsbuild/public/js/out/re_frame/interceptor.cljc","^E",119,"^F",8,"^G",119,"^H",15,"^I",true,"^J",["^K",["^L",["^K",[["~$event","^1D"],["^1P","^1D","~$db"]]]]],"^O","Create a fresh context","^11",["^ ","^Q",false,"^U",3,"^R",["^K",[["^1P","^1D"],["^1P","^1D","^1Q"]]],"^J",["^K",[["^1P","^1D"],["^1P","^1D","^1Q"]]],"^T",["^K",[null,null]]]],"^I",true,"^5","~$re-frame.interceptor/context","^Q",false,"^D","target/cljsbuild/public/js/out/re_frame/interceptor.cljc","^H",15,"^11",["^ ","^Q",false,"^U",3,"^R",["^K",[["^1P","^1D"],["^1P","^1D","^1Q"]]],"^J",["^K",[["^1P","^1D"],["^1P","^1D","^1Q"]]],"^T",["^K",[null,null]]],"^R",["^K",[["^1P","^1D"],["^1P","^1D","^1Q"]]],"^S",null,"^T",["^K",[null,null]],"^F",1,"^E",119,"^G",119,"^U",3,"^V",true,"^J",["^K",[["^1P","^1D"],["^1P","^1D","^1Q"]]],"^O","Create a fresh context"]],"~:require-macros",null,"~:cljs.analyzer/constants",["^ ","~:seen",["^4",["~:unnamed","~:db","~:queue","~:event","~:after","~:id","~:effects","~:stack","~:error","~:coeffects","~:before"]],"~:order",["^1Z","^1[","^24","^22","^1V","^20","^23","^1X","^21","^1Y","^1W"]],"^O",null]