["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:use-macros",["^ "],"~:excludes",["~#set",[]],"~:name","~$re-frame.core","~:imports",null,"~:requires",["^ ","~$re-frame.interop","^9","~$subs","~$re-frame.subs","~$set","~$clojure.set","~$cofx","~$re-frame.cofx","~$re-frame.interceptor","^@","~$fx","~$re-frame.fx","~$re-frame.events","^C","~$loggers","~$re-frame.loggers","^B","^B","~$re-frame.registrar","^F","~$interceptor","^@","~$router","~$re-frame.router","~$db","~$re-frame.db","~$registrar","^F","^I","^I","^=","^=","~$events","^C","~$re-frame.std-interceptors","^N","^E","^E","^;","^;","~$interop","^9","~$std-interceptors","^N","^?","^?","^K","^K"],"~:uses",["^ ","~$ctx-handler->interceptor","^N","~$fx-handler->interceptor","^N","~$db-handler->interceptor","^N"],"~:defs",["^ ","~$console",["^ ","^5","~$re-frame.core/console","~:file","target/cljsbuild/public/js/out/re_frame/core.cljc","~:line",120,"~:column",1,"~:end-line",120,"~:end-column",13,"~:meta",["^ ","^X","/Users/paulcristian/Kitchen/LvLUp/target/cljsbuild/public/js/out/re_frame/core.cljc","^Y",120,"^Z",6,"^[",120,"^10",13]],"~$on-changes",["^ ","^5","~$re-frame.core/on-changes","^X","target/cljsbuild/public/js/out/re_frame/core.cljc","^Y",44,"^Z",1,"^[",44,"^10",16,"^11",["^ ","^X","/Users/paulcristian/Kitchen/LvLUp/target/cljsbuild/public/js/out/re_frame/core.cljc","^Y",44,"^Z",6,"^[",44,"^10",16]],"~$enrich",["^ ","^5","~$re-frame.core/enrich","^X","target/cljsbuild/public/js/out/re_frame/core.cljc","^Y",41,"^Z",1,"^[",41,"^10",12,"^11",["^ ","^X","/Users/paulcristian/Kitchen/LvLUp/target/cljsbuild/public/js/out/re_frame/core.cljc","^Y",41,"^Z",6,"^[",41,"^10",12]],"~$reg-sub-raw",["^ ","~:protocol-inline",null,"^11",["^ ","^X","/Users/paulcristian/Kitchen/LvLUp/target/cljsbuild/public/js/out/re_frame/core.cljc","^Y",48,"^Z",7,"^[",48,"^10",18,"~:arglists",["~#list",["~$quote",["^19",[["~$query-id","~$handler-fn"]]]]],"~:doc","Associate a given `query id` with a given subscription handler function `handler-fn`\n   which is expected to take two arguments: app-db and query vector, and return\n   a `reaction`.\n\n  This is a low level, advanced function.  You should probably be using reg-sub\n  instead."],"^5","~$re-frame.core/reg-sub-raw","~:variadic",false,"^X","target/cljsbuild/public/js/out/re_frame/core.cljc","^10",18,"~:method-params",["^19",[["^1;","^1<"]]],"~:protocol-impl",null,"~:arglists-meta",["^19",[null,null]],"^Z",1,"^Y",48,"^[",48,"~:max-fixed-arity",2,"~:fn-var",true,"^18",["^19",["^1:",["^19",[["^1;","^1<"]]]]],"^1=","Associate a given `query id` with a given subscription handler function `handler-fn`\n   which is expected to take two arguments: app-db and query vector, and return\n   a `reaction`.\n\n  This is a low level, advanced function.  You should probably be using reg-sub\n  instead."],"~$subscribe",["^ ","^5","~$re-frame.core/subscribe","^X","target/cljsbuild/public/js/out/re_frame/core.cljc","^Y",59,"^Z",1,"^[",59,"^10",15,"^11",["^ ","^X","/Users/paulcristian/Kitchen/LvLUp/target/cljsbuild/public/js/out/re_frame/core.cljc","^Y",59,"^Z",6,"^[",59,"^10",15]],"~$assoc-coeffect",["^ ","^5","~$re-frame.core/assoc-coeffect","^X","target/cljsbuild/public/js/out/re_frame/core.cljc","^Y",35,"^Z",1,"^[",35,"^10",20,"^11",["^ ","^X","/Users/paulcristian/Kitchen/LvLUp/target/cljsbuild/public/js/out/re_frame/core.cljc","^Y",35,"^Z",6,"^[",35,"^10",20]],"~$register-sub",["^ ","^17",null,"^11",["^ ","^X","/Users/paulcristian/Kitchen/LvLUp/target/cljsbuild/public/js/out/re_frame/core.cljc","^Y",186,"^Z",7,"^[",186,"^10",19,"^18",["^19",["^1:",["^19",[["~$&","~$args"]]]]],"~:top-fn",["^ ","^1?",true,"^1C",0,"^1@",[["^19",["^1J"]]],"^18",["^19",[["~$&","^1J"]]],"^1B",["^19",[null]]]],"^5","~$re-frame.core/register-sub","^1?",true,"^X","target/cljsbuild/public/js/out/re_frame/core.cljc","^10",19,"^1K",["^ ","^1?",true,"^1C",0,"^1@",[["^19",["^1J"]]],"^18",["^19",[["~$&","^1J"]]],"^1B",["^19",[null]]],"^1@",[["^19",["^1J"]]],"^1A",null,"^1B",["^19",[null]],"^Z",1,"^Y",186,"^[",186,"^1C",0,"^1D",true,"^18",["^19",[["~$&","^1J"]]]],"~$remove-post-event-callback",["^ ","^17",null,"^11",["^ ","^X","/Users/paulcristian/Kitchen/LvLUp/target/cljsbuild/public/js/out/re_frame/core.cljc","^Y",174,"^Z",7,"^[",174,"^10",33,"^18",["^19",["^1:",["^19",[["~$id"]]]]]],"^5","~$re-frame.core/remove-post-event-callback","^1?",false,"^X","target/cljsbuild/public/js/out/re_frame/core.cljc","^10",33,"^1@",["^19",[["^1N"]]],"^1A",null,"^1B",["^19",[null,null]],"^Z",1,"^Y",174,"^[",174,"^1C",1,"^1D",true,"^18",["^19",["^1:",["^19",[["^1N"]]]]]],"~$path",["^ ","^5","~$re-frame.core/path","^X","target/cljsbuild/public/js/out/re_frame/core.cljc","^Y",40,"^Z",1,"^[",40,"^10",10,"^11",["^ ","^X","/Users/paulcristian/Kitchen/LvLUp/target/cljsbuild/public/js/out/re_frame/core.cljc","^Y",40,"^Z",6,"^[",40,"^10",10]],"~$reg-sub",["^ ","^5","~$re-frame.core/reg-sub","^X","target/cljsbuild/public/js/out/re_frame/core.cljc","^Y",58,"^Z",1,"^[",58,"^10",13,"^11",["^ ","^X","/Users/paulcristian/Kitchen/LvLUp/target/cljsbuild/public/js/out/re_frame/core.cljc","^Y",58,"^Z",6,"^[",58,"^10",13]],"~$make-restore-fn",["^ ","^17",null,"^11",["^ ","^X","/Users/paulcristian/Kitchen/LvLUp/target/cljsbuild/public/js/out/re_frame/core.cljc","^Y",125,"^Z",7,"^[",125,"^10",22,"^18",["^19",["^1:",["^19",[[]]]]],"^1=","Checkpoints the state of re-frame and returns a function which, when\n  later called, will restore re-frame to that checkpointed state.\n\n  Checkpoint includes app-db, all registered handlers and all subscriptions.\n  "],"^5","~$re-frame.core/make-restore-fn","^1?",false,"^X","target/cljsbuild/public/js/out/re_frame/core.cljc","^10",22,"^1@",["^19",[[]]],"^1A",null,"^1B",["^19",[null,null]],"^Z",1,"^Y",125,"^[",125,"^1C",0,"^1D",true,"^18",["^19",["^1:",["^19",[[]]]]],"^1=","Checkpoints the state of re-frame and returns a function which, when\n  later called, will restore re-frame to that checkpointed state.\n\n  Checkpoint includes app-db, all registered handlers and all subscriptions.\n  "],"~$clear-fx",["^ ","^5","~$re-frame.core/clear-fx","^X","target/cljsbuild/public/js/out/re_frame/core.cljc","^Y",66,"^Z",1,"^[",66,"^10",14,"^11",["^ ","^X","/Users/paulcristian/Kitchen/LvLUp/target/cljsbuild/public/js/out/re_frame/core.cljc","^Y",66,"^Z",6,"^[",66,"^10",14]],"~$get-effect",["^ ","^5","~$re-frame.core/get-effect","^X","target/cljsbuild/public/js/out/re_frame/core.cljc","^Y",33,"^Z",1,"^[",33,"^10",16,"^11",["^ ","^X","/Users/paulcristian/Kitchen/LvLUp/target/cljsbuild/public/js/out/re_frame/core.cljc","^Y",33,"^Z",6,"^[",33,"^10",16]],"~$reg-event-db",["^ ","^17",null,"^11",["^ ","^X","/Users/paulcristian/Kitchen/LvLUp/target/cljsbuild/public/js/out/re_frame/core.cljc","^Y",77,"^Z",7,"^[",77,"^10",19,"^18",["^19",["^1:",["^19",[["^1N","~$db-handler"],["^1N","~$interceptors","^1["]]]]],"^1=","Register the given `id`, typically a keyword, with the combination of\n  `db-handler` and an interceptor chain.\n  `db-handler` is a function: (db event) -> db\n  `interceptors` is a collection of interceptors, possibly nested (needs flattening).\n  `db-handler` is wrapped in an interceptor and added to the end of the chain, so in the end\n   there is only a chain.\n   The necessary effects and coeffects handler are added to the front of the\n   interceptor chain.  These interceptors ensure that app-db is available and updated.","^1K",["^ ","^1?",false,"^1C",3,"^1@",["^19",[["^1N","^1["],["^1N","^20","^1["]]],"^18",["^19",[["^1N","^1["],["^1N","^20","^1["]]],"^1B",["^19",[null,null]]]],"^5","~$re-frame.core/reg-event-db","^1?",false,"^X","target/cljsbuild/public/js/out/re_frame/core.cljc","^10",19,"^1K",["^ ","^1?",false,"^1C",3,"^1@",["^19",[["^1N","^1["],["^1N","^20","^1["]]],"^18",["^19",[["^1N","^1["],["^1N","^20","^1["]]],"^1B",["^19",[null,null]]],"^1@",["^19",[["^1N","^1["],["^1N","^20","^1["]]],"^1A",null,"^1B",["^19",[null,null]],"^Z",1,"^Y",77,"^[",77,"^1C",3,"^1D",true,"^18",["^19",[["^1N","^1["],["^1N","^20","^1["]]],"^1=","Register the given `id`, typically a keyword, with the combination of\n  `db-handler` and an interceptor chain.\n  `db-handler` is a function: (db event) -> db\n  `interceptors` is a collection of interceptors, possibly nested (needs flattening).\n  `db-handler` is wrapped in an interceptor and added to the end of the chain, so in the end\n   there is only a chain.\n   The necessary effects and coeffects handler are added to the front of the\n   interceptor chain.  These interceptors ensure that app-db is available and updated."],"~$dispatch-sync",["^ ","^5","~$re-frame.core/dispatch-sync","^X","target/cljsbuild/public/js/out/re_frame/core.cljc","^Y",21,"^Z",1,"^[",21,"^10",19,"^11",["^ ","^X","/Users/paulcristian/Kitchen/LvLUp/target/cljsbuild/public/js/out/re_frame/core.cljc","^Y",21,"^Z",6,"^[",21,"^10",19]],"~$clear-event",["^ ","^5","~$re-frame.core/clear-event","^X","target/cljsbuild/public/js/out/re_frame/core.cljc","^Y",75,"^Z",1,"^[",75,"^10",17,"^11",["^ ","^X","/Users/paulcristian/Kitchen/LvLUp/target/cljsbuild/public/js/out/re_frame/core.cljc","^Y",75,"^Z",6,"^[",75,"^10",17]],"~$->interceptor",["^ ","^5","~$re-frame.core/->interceptor","^X","target/cljsbuild/public/js/out/re_frame/core.cljc","^Y",30,"^Z",1,"^[",30,"^10",19,"^11",["^ ","^X","/Users/paulcristian/Kitchen/LvLUp/target/cljsbuild/public/js/out/re_frame/core.cljc","^Y",30,"^Z",6,"^[",30,"^10",19]],"~$set-loggers!",["^ ","^5","~$re-frame.core/set-loggers!","^X","target/cljsbuild/public/js/out/re_frame/core.cljc","^Y",113,"^Z",1,"^[",113,"^10",18,"^11",["^ ","^X","/Users/paulcristian/Kitchen/LvLUp/target/cljsbuild/public/js/out/re_frame/core.cljc","^Y",113,"^Z",6,"^[",113,"^10",18]],"~$inject-cofx",["^ ","^5","~$re-frame.core/inject-cofx","^X","target/cljsbuild/public/js/out/re_frame/core.cljc","^Y",70,"^Z",1,"^[",70,"^10",17,"^11",["^ ","^X","/Users/paulcristian/Kitchen/LvLUp/target/cljsbuild/public/js/out/re_frame/core.cljc","^Y",70,"^Z",6,"^[",70,"^10",17]],"~$get-coeffect",["^ ","^5","~$re-frame.core/get-coeffect","^X","target/cljsbuild/public/js/out/re_frame/core.cljc","^Y",32,"^Z",1,"^[",32,"^10",18,"^11",["^ ","^X","/Users/paulcristian/Kitchen/LvLUp/target/cljsbuild/public/js/out/re_frame/core.cljc","^Y",32,"^Z",6,"^[",32,"^10",18]],"~$debug",["^ ","^5","~$re-frame.core/debug","^X","target/cljsbuild/public/js/out/re_frame/core.cljc","^Y",39,"^Z",1,"^[",39,"^10",11,"^11",["^ ","^X","/Users/paulcristian/Kitchen/LvLUp/target/cljsbuild/public/js/out/re_frame/core.cljc","^Y",39,"^Z",6,"^[",39,"^10",11]],"~$assoc-effect",["^ ","^5","~$re-frame.core/assoc-effect","^X","target/cljsbuild/public/js/out/re_frame/core.cljc","^Y",34,"^Z",1,"^[",34,"^10",18,"^11",["^ ","^X","/Users/paulcristian/Kitchen/LvLUp/target/cljsbuild/public/js/out/re_frame/core.cljc","^Y",34,"^Z",6,"^[",34,"^10",18]],"~$enqueue",["^ ","^5","~$re-frame.core/enqueue","^X","target/cljsbuild/public/js/out/re_frame/core.cljc","^Y",31,"^Z",1,"^[",31,"^10",13,"^11",["^ ","^X","/Users/paulcristian/Kitchen/LvLUp/target/cljsbuild/public/js/out/re_frame/core.cljc","^Y",31,"^Z",6,"^[",31,"^10",13]],"~$clear-cofx",["^ ","^5","~$re-frame.core/clear-cofx","^X","target/cljsbuild/public/js/out/re_frame/core.cljc","^Y",71,"^Z",1,"^[",71,"^10",16,"^11",["^ ","^X","/Users/paulcristian/Kitchen/LvLUp/target/cljsbuild/public/js/out/re_frame/core.cljc","^Y",71,"^Z",6,"^[",71,"^10",16]],"~$reg-event-ctx",["^ ","^17",null,"^11",["^ ","^X","/Users/paulcristian/Kitchen/LvLUp/target/cljsbuild/public/js/out/re_frame/core.cljc","^Y",99,"^Z",7,"^[",99,"^10",20,"^18",["^19",["^1:",["^19",[["^1N","~$handler"],["^1N","^20","^2G"]]]]],"^1K",["^ ","^1?",false,"^1C",3,"^1@",["^19",[["^1N","^2G"],["^1N","^20","^2G"]]],"^18",["^19",[["^1N","^2G"],["^1N","^20","^2G"]]],"^1B",["^19",[null,null]]]],"^5","~$re-frame.core/reg-event-ctx","^1?",false,"^X","target/cljsbuild/public/js/out/re_frame/core.cljc","^10",20,"^1K",["^ ","^1?",false,"^1C",3,"^1@",["^19",[["^1N","^2G"],["^1N","^20","^2G"]]],"^18",["^19",[["^1N","^2G"],["^1N","^20","^2G"]]],"^1B",["^19",[null,null]]],"^1@",["^19",[["^1N","^2G"],["^1N","^20","^2G"]]],"^1A",null,"^1B",["^19",[null,null]],"^Z",1,"^Y",99,"^[",99,"^1C",3,"^1D",true,"^18",["^19",[["^1N","^2G"],["^1N","^20","^2G"]]]],"~$reg-fx",["^ ","^5","~$re-frame.core/reg-fx","^X","target/cljsbuild/public/js/out/re_frame/core.cljc","^Y",65,"^Z",1,"^[",65,"^10",12,"^11",["^ ","^X","/Users/paulcristian/Kitchen/LvLUp/target/cljsbuild/public/js/out/re_frame/core.cljc","^Y",65,"^Z",6,"^[",65,"^10",12]],"~$trim-v",["^ ","^5","~$re-frame.core/trim-v","^X","target/cljsbuild/public/js/out/re_frame/core.cljc","^Y",42,"^Z",1,"^[",42,"^10",12,"^11",["^ ","^X","/Users/paulcristian/Kitchen/LvLUp/target/cljsbuild/public/js/out/re_frame/core.cljc","^Y",42,"^Z",6,"^[",42,"^10",12]],"~$clear-sub",["^ ","^5","~$re-frame.core/clear-sub","^X","target/cljsbuild/public/js/out/re_frame/core.cljc","^Y",61,"^Z",1,"^[",61,"^10",15,"^11",["^ ","^X","/Users/paulcristian/Kitchen/LvLUp/target/cljsbuild/public/js/out/re_frame/core.cljc","^Y",61,"^Z",6,"^[",61,"^10",15]],"~$dispatch",["^ ","^5","~$re-frame.core/dispatch","^X","target/cljsbuild/public/js/out/re_frame/core.cljc","^Y",20,"^Z",1,"^[",20,"^10",14,"^11",["^ ","^X","/Users/paulcristian/Kitchen/LvLUp/target/cljsbuild/public/js/out/re_frame/core.cljc","^Y",20,"^Z",6,"^[",20,"^10",14]],"~$after",["^ ","^5","~$re-frame.core/after","^X","target/cljsbuild/public/js/out/re_frame/core.cljc","^Y",43,"^Z",1,"^[",43,"^10",11,"^11",["^ ","^X","/Users/paulcristian/Kitchen/LvLUp/target/cljsbuild/public/js/out/re_frame/core.cljc","^Y",43,"^Z",6,"^[",43,"^10",11]],"~$add-post-event-callback",["^ ","^17",null,"^11",["^ ","^X","/Users/paulcristian/Kitchen/LvLUp/target/cljsbuild/public/js/out/re_frame/core.cljc","^Y",153,"^Z",7,"^[",153,"^10",30,"^18",["^19",["^1:",["^19",[["~$f"],["^1N","~$f"]]]]],"^1=","Registers a function `f` to be called after each event is processed\n   `f` will be called with two arguments:\n    - `event`: a vector. The event just processed.\n    - `queue`: a PersistentQueue, possibly empty, of events yet to be processed.\n\n   This is useful in advanced cases like:\n     - you are implementing a complex bootstrap pipeline\n     - you want to create your own handling infrastructure, with perhaps multiple\n       handlers for the one event, etc.  Hook in here.\n     - libraries providing 'isomorphic javascript' rendering on  Nodejs or Nashorn.\n\n  'id' is typically a keyword. Supplied at \"add time\" so it can subsequently\n  be used at \"remove time\" to get rid of the right callback.\n  ","^1K",["^ ","^1?",false,"^1C",2,"^1@",["^19",[["~$f"],["^1N","~$f"]]],"^18",["^19",[["~$f"],["^1N","~$f"]]],"^1B",["^19",[null,null]]]],"^5","~$re-frame.core/add-post-event-callback","^1?",false,"^X","target/cljsbuild/public/js/out/re_frame/core.cljc","^10",30,"^1K",["^ ","^1?",false,"^1C",2,"^1@",["^19",[["~$f"],["^1N","~$f"]]],"^18",["^19",[["~$f"],["^1N","~$f"]]],"^1B",["^19",[null,null]]],"^1@",["^19",[["~$f"],["^1N","~$f"]]],"^1A",null,"^1B",["^19",[null,null]],"^Z",1,"^Y",153,"^[",153,"^1C",2,"^1D",true,"^18",["^19",[["~$f"],["^1N","~$f"]]],"^1=","Registers a function `f` to be called after each event is processed\n   `f` will be called with two arguments:\n    - `event`: a vector. The event just processed.\n    - `queue`: a PersistentQueue, possibly empty, of events yet to be processed.\n\n   This is useful in advanced cases like:\n     - you are implementing a complex bootstrap pipeline\n     - you want to create your own handling infrastructure, with perhaps multiple\n       handlers for the one event, etc.  Hook in here.\n     - libraries providing 'isomorphic javascript' rendering on  Nodejs or Nashorn.\n\n  'id' is typically a keyword. Supplied at \"add time\" so it can subsequently\n  be used at \"remove time\" to get rid of the right callback.\n  "],"~$reg-cofx",["^ ","^5","~$re-frame.core/reg-cofx","^X","target/cljsbuild/public/js/out/re_frame/core.cljc","^Y",69,"^Z",1,"^[",69,"^10",14,"^11",["^ ","^X","/Users/paulcristian/Kitchen/LvLUp/target/cljsbuild/public/js/out/re_frame/core.cljc","^Y",69,"^Z",6,"^[",69,"^10",14]],"~$reg-event-fx",["^ ","^17",null,"^11",["^ ","^X","/Users/paulcristian/Kitchen/LvLUp/target/cljsbuild/public/js/out/re_frame/core.cljc","^Y",92,"^Z",7,"^[",92,"^10",19,"^18",["^19",["^1:",["^19",[["^1N","~$fx-handler"],["^1N","^20","^2X"]]]]],"^1K",["^ ","^1?",false,"^1C",3,"^1@",["^19",[["^1N","^2X"],["^1N","^20","^2X"]]],"^18",["^19",[["^1N","^2X"],["^1N","^20","^2X"]]],"^1B",["^19",[null,null]]]],"^5","~$re-frame.core/reg-event-fx","^1?",false,"^X","target/cljsbuild/public/js/out/re_frame/core.cljc","^10",19,"^1K",["^ ","^1?",false,"^1C",3,"^1@",["^19",[["^1N","^2X"],["^1N","^20","^2X"]]],"^18",["^19",[["^1N","^2X"],["^1N","^20","^2X"]]],"^1B",["^19",[null,null]]],"^1@",["^19",[["^1N","^2X"],["^1N","^20","^2X"]]],"^1A",null,"^1B",["^19",[null,null]],"^Z",1,"^Y",92,"^[",92,"^1C",3,"^1D",true,"^18",["^19",[["^1N","^2X"],["^1N","^20","^2X"]]]],"~$register-handler",["^ ","^17",null,"^11",["^ ","^X","/Users/paulcristian/Kitchen/LvLUp/target/cljsbuild/public/js/out/re_frame/core.cljc","^Y",181,"^Z",7,"^[",181,"^10",23,"^18",["^19",["^1:",["^19",[["~$&","^1J"]]]]],"^1K",["^ ","^1?",true,"^1C",0,"^1@",[["^19",["^1J"]]],"^18",["^19",[["~$&","^1J"]]],"^1B",["^19",[null]]]],"^5","~$re-frame.core/register-handler","^1?",true,"^X","target/cljsbuild/public/js/out/re_frame/core.cljc","^10",23,"^1K",["^ ","^1?",true,"^1C",0,"^1@",[["^19",["^1J"]]],"^18",["^19",[["~$&","^1J"]]],"^1B",["^19",[null]]],"^1@",[["^19",["^1J"]]],"^1A",null,"^1B",["^19",[null]],"^Z",1,"^Y",181,"^[",181,"^1C",0,"^1D",true,"^18",["^19",[["~$&","^1J"]]]],"~$clear-subscription-cache!",["^ ","^5","~$re-frame.core/clear-subscription-cache!","^X","target/cljsbuild/public/js/out/re_frame/core.cljc","^Y",62,"^Z",1,"^[",62,"^10",31,"^11",["^ ","^X","/Users/paulcristian/Kitchen/LvLUp/target/cljsbuild/public/js/out/re_frame/core.cljc","^Y",62,"^Z",6,"^[",62,"^10",31]]],"~:require-macros",null,"~:cljs.analyzer/constants",["^ ","~:seen",["^4",["~:warn"]],"~:order",["^35"]],"^1=",null]