["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:use-macros",["^ ","~$console","~$re-frame.loggers"],"~:excludes",["~#set",[]],"~:name","~$re-frame.cofx","~:imports",null,"~:requires",["^ ","~$re-frame.db","^;","~$re-frame.interceptor","^<","~$re-frame.registrar","^=","^4","^4"],"~:uses",["^ ","^3","^4","~$app-db","^;","~$->interceptor","^<","~$get-handler","^=","~$clear-handlers","^=","~$register-handler","^="],"~:defs",["^ ","~$kind",["^ ","^7","~$re-frame.cofx/kind","~:file","target/cljsbuild/public/js/out/re_frame/cofx.cljc","~:line",11,"~:column",1,"~:end-line",11,"~:end-column",10,"~:meta",["^ ","^G","/Users/paulcristian/Kitchen/LvLUp/target/cljsbuild/public/js/out/re_frame/cofx.cljc","^H",11,"^I",6,"^J",11,"^K",10]],"~$register",["^ ","^7","~$re-frame.cofx/register","^G","target/cljsbuild/public/js/out/re_frame/cofx.cljc","^H",13,"^I",1,"^J",13,"^K",14,"^L",["^ ","^G","/Users/paulcristian/Kitchen/LvLUp/target/cljsbuild/public/js/out/re_frame/cofx.cljc","^H",13,"^I",6,"^J",13,"^K",14]],"~$inject-cofx",["^ ","~:protocol-inline",null,"^L",["^ ","^G","/Users/paulcristian/Kitchen/LvLUp/target/cljsbuild/public/js/out/re_frame/cofx.cljc","^H",18,"^I",7,"^J",18,"^K",18,"~:arglists",["~#list",["~$quote",["^R",[["~$id"],["^T","~$value"]]]]],"~:doc","Returns an interceptor which adds to a `context's` `:coeffects`.\n\n  `coeffects` are the input resources required by an event handler\n   to perform its job. The two most obvious ones are `db` and `event`.\n   But sometimes a handler might need other resources.\n\n   Perhaps a handler needs a random number or a GUID or the current datetime.\n   Perhaps it needs access to the connection to a DataScript database.\n\n   If the handler directly access these resources, it stops being as\n   pure. It immedaitely becomes harder to test, etc.\n\n   So the necessary resources are \"injected\" into the `coeffect` (map)\n   given the handler.\n\n   Given an `id`, and an optional value, lookup the registered coeffect\n   handler (previously registered via `reg-cofx`) and it with two arguments:\n   the current value of `:coeffects` and, optionally, the value. The registered handler\n   is expected to return a modified coeffect.\n   ","~:top-fn",["^ ","~:variadic",false,"~:max-fixed-arity",2,"~:method-params",["^R",[["^T"],["^T","^U"]]],"^Q",["^R",[["^T"],["^T","^U"]]],"~:arglists-meta",["^R",[null,null]]]],"^7","~$re-frame.cofx/inject-cofx","^X",false,"^G","target/cljsbuild/public/js/out/re_frame/cofx.cljc","^K",18,"^W",["^ ","^X",false,"^Y",2,"^Z",["^R",[["^T"],["^T","^U"]]],"^Q",["^R",[["^T"],["^T","^U"]]],"^[",["^R",[null,null]]],"^Z",["^R",[["^T"],["^T","^U"]]],"~:protocol-impl",null,"^[",["^R",[null,null]],"^I",1,"^H",18,"^J",18,"^Y",2,"~:fn-var",true,"^Q",["^R",[["^T"],["^T","^U"]]],"^V","Returns an interceptor which adds to a `context's` `:coeffects`.\n\n  `coeffects` are the input resources required by an event handler\n   to perform its job. The two most obvious ones are `db` and `event`.\n   But sometimes a handler might need other resources.\n\n   Perhaps a handler needs a random number or a GUID or the current datetime.\n   Perhaps it needs access to the connection to a DataScript database.\n\n   If the handler directly access these resources, it stops being as\n   pure. It immedaitely becomes harder to test, etc.\n\n   So the necessary resources are \"injected\" into the `coeffect` (map)\n   given the handler.\n\n   Given an `id`, and an optional value, lookup the registered coeffect\n   handler (previously registered via `reg-cofx`) and it with two arguments:\n   the current value of `:coeffects` and, optionally, the value. The registered handler\n   is expected to return a modified coeffect.\n   "],"~$inject-db",["^ ","^7","~$re-frame.cofx/inject-db","^G","target/cljsbuild/public/js/out/re_frame/cofx.cljc","^H",66,"^I",1,"^J",66,"^K",15,"^L",["^ ","^G","/Users/paulcristian/Kitchen/LvLUp/target/cljsbuild/public/js/out/re_frame/cofx.cljc","^H",66,"^I",6,"^J",66,"^K",15]]],"~:require-macros",null,"~:cljs.analyzer/constants",["^ ","~:seen",["^6",["~:db","~:id","~:coeffects","~:cofx","~:before"]],"~:order",["^1;","^19","^1:","^1<","^18"]],"^V",null]